//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/ActionMaps/PlayerControllers.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControllers: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControllers()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControllers"",
    ""maps"": [
        {
            ""name"": ""PlayerMainControllers"",
            ""id"": ""d9f17e92-2c13-4871-83d6-ae4d6a839d6c"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""41c9850c-ca04-4741-8e22-fd10a8c90a3c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ChangeGravity"",
                    ""type"": ""Button"",
                    ""id"": ""b43c5150-2d4a-414d-ab29-7cc7fe1e310c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""32eb551c-3cd6-4902-9044-e1f443476264"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""e646af41-dce1-499b-8001-c17559c310a3"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d4870937-416b-46bf-ac81-b60c374cdc13"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""41d87518-693a-40fe-b101-5be1170be45f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e3233367-0ffa-4cb8-946a-0525fa624d67"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""19dbca24-b437-4c44-a402-40081092bf99"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""760df972-1c0e-4bc5-a3ae-fdd59f0b1e36"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeGravity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e1b8a539-d5d9-4351-9de0-97949dcc56ed"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerMainControllers
        m_PlayerMainControllers = asset.FindActionMap("PlayerMainControllers", throwIfNotFound: true);
        m_PlayerMainControllers_Movement = m_PlayerMainControllers.FindAction("Movement", throwIfNotFound: true);
        m_PlayerMainControllers_ChangeGravity = m_PlayerMainControllers.FindAction("ChangeGravity", throwIfNotFound: true);
        m_PlayerMainControllers_Interact = m_PlayerMainControllers.FindAction("Interact", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMainControllers
    private readonly InputActionMap m_PlayerMainControllers;
    private List<IPlayerMainControllersActions> m_PlayerMainControllersActionsCallbackInterfaces = new List<IPlayerMainControllersActions>();
    private readonly InputAction m_PlayerMainControllers_Movement;
    private readonly InputAction m_PlayerMainControllers_ChangeGravity;
    private readonly InputAction m_PlayerMainControllers_Interact;
    public struct PlayerMainControllersActions
    {
        private @PlayerControllers m_Wrapper;
        public PlayerMainControllersActions(@PlayerControllers wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerMainControllers_Movement;
        public InputAction @ChangeGravity => m_Wrapper.m_PlayerMainControllers_ChangeGravity;
        public InputAction @Interact => m_Wrapper.m_PlayerMainControllers_Interact;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMainControllers; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMainControllersActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMainControllersActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMainControllersActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMainControllersActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @ChangeGravity.started += instance.OnChangeGravity;
            @ChangeGravity.performed += instance.OnChangeGravity;
            @ChangeGravity.canceled += instance.OnChangeGravity;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
        }

        private void UnregisterCallbacks(IPlayerMainControllersActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @ChangeGravity.started -= instance.OnChangeGravity;
            @ChangeGravity.performed -= instance.OnChangeGravity;
            @ChangeGravity.canceled -= instance.OnChangeGravity;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
        }

        public void RemoveCallbacks(IPlayerMainControllersActions instance)
        {
            if (m_Wrapper.m_PlayerMainControllersActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMainControllersActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMainControllersActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMainControllersActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMainControllersActions @PlayerMainControllers => new PlayerMainControllersActions(this);
    public interface IPlayerMainControllersActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnChangeGravity(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
}
